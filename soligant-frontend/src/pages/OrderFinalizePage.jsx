// src/pages/OrderFinalizePage.jsx
import { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { motion } from "framer-motion";
import { toast } from "react-toastify";
import Button from "../components/ui/Button";
import FormInput from "../components/ui/FormInput";
import Loading from "../components/ui/Loading";
import {
  getOrderFromGoogleSheets,
  updateOrderStatusInGoogleSheets,
} from "../services/mockGoogleSheets";

const OrderFinalizePage = () => {
  const { orderId } = useParams();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [orderData, setOrderData] = useState(null);
  const [error, setError] = useState(null);
  const [submitting, setSubmitting] = useState(false);
  const [showSuccessModal, setShowSuccessModal] = useState(false);

  // Form data for finalization
  const [formData, setFormData] = useState({
    recipientName: "",
    recipientPhone: "",
    recipientAddress: "",
    deliveryMethod: "shipping",
    desiredDeliveryDate: "",
    shippingPayer: "customer",
    petInfo: "",
    cardMessage: "",
    frameColor: "natural",
    qrCodeLink: "",
    specialNotes: "",
  });

  useEffect(() => {
    const loadOrderData = async () => {
      if (!orderId) {
        setError("Kh√¥ng t√¨m th·∫•y m√£ ƒë∆°n h√†ng");
        setLoading(false);
        return;
      }

      try {
        const result = await getOrderFromGoogleSheets(orderId);
        if (result.success) {
          setOrderData(result.data);
          // Pre-fill some data from order
          setFormData((prev) => ({
            ...prev,
            recipientName: result.data.customerName,
            recipientPhone: result.data.customerPhone,
          }));
        } else {
          setError("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ho·∫∑c ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ch·ªët");
        }
      } catch (err) {
        console.error("Error loading order:", err);
        setError("C√≥ l·ªói x·∫£y ra khi t·∫£i ƒë∆°n h√†ng");
      } finally {
        setLoading(false);
      }
    };

    loadOrderData();
  }, [orderId]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // Validation
    if (!formData.recipientName.trim()) {
      toast.warning("Vui l√≤ng nh·∫≠p t√™n ng∆∞·ªùi nh·∫≠n");
      return;
    }

    setSubmitting(true);
    try {
      // Simulate moving order to PostgreSQL and updating status
      await updateOrderStatusInGoogleSheets(orderId, "Ch·ªù x√°c nh·∫≠n");

      // In real app, this would also save finalization data to PostgreSQL
      console.log("Order finalization data:", {
        orderId,
        ...formData,
        finalizedAt: new Date().toISOString(),
      });
      toast.success("ƒê√£ ch·ªët ƒë∆°n th√†nh c√¥ng! ƒê∆°n h√†ng ƒëang ch·ªù x√°c nh·∫≠n.");

      // Show success modal instead of navigating
      setShowSuccessModal(true);
    } catch (error) {
      console.error("Error finalizing order:", error);
      toast.error("C√≥ l·ªói x·∫£y ra khi ch·ªët ƒë∆°n");
    } finally {
      setSubmitting(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <Loading size="large" />
          <p className="mt-4 font-utm-avo">ƒêang t·∫£i th√¥ng tin ƒë∆°n h√†ng...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-red-500 mb-4 font-utm-avo">
            ƒê√£ x·∫£y ra l·ªói
          </h2>
          <p className="mb-6 font-utm-avo">{error}</p>
          <Button variant="primary" onClick={() => navigate("/order-search")}>
            Quay l·∫°i t√¨m ki·∫øm
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="container mx-auto px-4 max-w-4xl">
        <motion.h1
          className="text-3xl md:text-4xl font-utm-avo text-soligant-primary text-center mb-8"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          Ch·ªët ƒë∆°n h√†ng
        </motion.h1>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Order Summary */}
          <div className="lg:col-span-1">
            <motion.div
              className="bg-white rounded-lg shadow-lg p-6 sticky top-8"
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.6 }}
            >
              <h2 className="text-xl font-bold mb-4 font-utm-avo">
                Th√¥ng tin ƒë∆°n h√†ng
              </h2>

              <div className="space-y-3 text-sm">
                <div>
                  <span className="font-medium">M√£ ƒë∆°n:</span> #
                  {orderData?.orderId}
                </div>
                <div>
                  <span className="font-medium">Kh√°ch h√†ng:</span>{" "}
                  {orderData?.customerName}
                </div>
                <div>
                  <span className="font-medium">SƒêT:</span>{" "}
                  {orderData?.customerPhone}
                </div>
                <div>
                  <span className="font-medium">Phi√™n b·∫£n:</span>{" "}
                  {orderData?.version}
                </div>
                <div className="border-t pt-3">
                  <span className="font-medium">T·ªïng ti·ªÅn:</span>
                  <span className="text-lg font-bold text-soligant-primary ml-2">
                    {new Intl.NumberFormat("vi-VN").format(
                      orderData?.totalPrice || 0
                    )}{" "}
                    VNƒê
                  </span>
                </div>
              </div>

              <div className="mt-6 p-3 bg-blue-50 rounded-lg">
                <p className="text-sm text-blue-700 font-utm-avo">
                  üí° Sau khi ch·ªët ƒë∆°n, th√¥ng tin s·∫Ω kh√¥ng th·ªÉ ch·ªânh s·ª≠a. ƒê∆°n
                  h√†ng s·∫Ω chuy·ªÉn sang tr·∫°ng th√°i "Ch·ªù thanh to√°n".
                </p>
              </div>
            </motion.div>
          </div>

          {/* Finalization Form */}
          <div className="lg:col-span-2">
            <motion.div
              className="bg-white rounded-lg shadow-lg p-6"
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.6 }}
            >
              <h2 className="text-xl font-bold mb-6 font-utm-avo">
                Th√¥ng tin giao h√†ng
              </h2>

              <form onSubmit={handleSubmit} className="space-y-6">
                {/* Recipient Information */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <FormInput
                    label="H·ªç t√™n ng∆∞·ªùi nh·∫≠n *"
                    name="recipientName"
                    value={formData.recipientName}
                    onChange={handleInputChange}
                    placeholder="Nh·∫≠p h·ªç t√™n ng∆∞·ªùi nh·∫≠n"
                    required
                  />
                </div>

                {/* Delivery Options */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      H√¨nh th·ª©c nh·∫≠n h√†ng *
                    </label>
                    <select
                      name="deliveryMethod"
                      value={formData.deliveryMethod}
                      onChange={handleInputChange}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-soligant-primary"
                      required
                    >
                      <option value="shipping">Giao h√†ng t·∫≠n n∆°i</option>
                      <option value="pickup">T·ª± ƒë·∫øn l·∫•y</option>
                    </select>
                  </div>

                  <FormInput
                    label="Th·ªùi gian nh·∫≠n mong mu·ªën"
                    name="desiredDeliveryDate"
                    type="date"
                    value={formData.desiredDeliveryDate}
                    onChange={handleInputChange}
                    min={new Date().toISOString().split("T")[0]}
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Ng∆∞·ªùi tr·∫£ ph√≠ ship
                  </label>
                  <div className="flex space-x-4">
                    <label className="flex items-center">
                      <input
                        type="radio"
                        name="shippingPayer"
                        value="customer"
                        checked={formData.shippingPayer === "customer"}
                        onChange={handleInputChange}
                        className="mr-2"
                      />
                      Kh√°ch h√†ng tr·∫£
                    </label>
                    <label className="flex items-center">
                      <input
                        type="radio"
                        name="shippingPayer"
                        value="shop"
                        checked={formData.shippingPayer === "shop"}
                        onChange={handleInputChange}
                        className="mr-2"
                      />
                      Shop tr·∫£
                    </label>
                  </div>
                </div>

                {/* Additional Information */}
                <FormInput
                  label="Th√¥ng tin th√∫ c∆∞ng (n·∫øu c√≥)"
                  name="petInfo"
                  value={formData.petInfo}
                  onChange={handleInputChange}
                  placeholder="VD: M√®o c√°i, l√¥ng v√†ng, t√™n Mimi"
                  isTextarea
                  rows={2}
                />

                <FormInput
                  label="N·ªôi dung thi·ªáp"
                  name="cardMessage"
                  value={formData.cardMessage}
                  onChange={handleInputChange}
                  placeholder="Nh·∫≠p l·ªùi nh·∫Øn mu·ªën ghi tr√™n thi·ªáp (t·ªëi ƒëa 100 k√Ω t·ª±)"
                  maxLength={100}
                  isTextarea
                  rows={3}
                />

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      M√†u khung tranh
                    </label>
                    <select
                      name="frameColor"
                      value={formData.frameColor}
                      onChange={handleInputChange}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-soligant-primary"
                    >
                      <option value="natural">M√†u g·ªó t·ª± nhi√™n</option>
                      <option value="white">M√†u tr·∫Øng</option>
                      <option value="black">M√†u ƒëen</option>
                      <option value="brown">M√†u n√¢u</option>
                    </select>
                  </div>

                  <FormInput
                    label="Link QR code (n·∫øu c√≥)"
                    name="qrCodeLink"
                    value={formData.qrCodeLink}
                    onChange={handleInputChange}
                    placeholder="Nh·∫≠p link QR code"
                  />
                </div>

                <FormInput
                  label="Ghi ch√∫ ho·∫∑c l∆∞u √Ω ƒë·∫∑c bi·ªát"
                  name="specialNotes"
                  value={formData.specialNotes}
                  onChange={handleInputChange}
                  placeholder="C√°c y√™u c·∫ßu ƒë·∫∑c bi·ªát kh√°c..."
                  isTextarea
                  rows={3}
                />

                {/* Submit Button */}
                <div className="flex justify-center space-x-4 pt-6">
                  <Button
                    variant="outline"
                    onClick={() => navigate("/order-search")}
                    disabled={submitting}
                  >
                    H·ªßy
                  </Button>
                  <Button
                    variant="primary"
                    type="submit"
                    disabled={submitting}
                    className="px-8"
                  >
                    {submitting ? <Loading size="small" /> : "Ch·ªët ƒë∆°n"}
                  </Button>
                </div>
              </form>
            </motion.div>{" "}
          </div>
        </div>

        {/* Success Modal */}
        {showSuccessModal && (
          <motion.div
            className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
          >
            <motion.div
              className="bg-white rounded-lg shadow-xl max-w-md w-full p-6"
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
            >
              <div className="text-center">
                {/* Success Icon */}
                <div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100 mb-4">
                  <svg
                    className="h-6 w-6 text-green-600"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2"
                      d="M5 13l4 4L19 7"
                    />
                  </svg>
                </div>

                {/* Title */}
                <h3 className="text-lg font-bold text-gray-900 mb-2 font-utm-avo">
                  Ch·ªët ƒë∆°n th√†nh c√¥ng!
                </h3>

                {/* Message */}
                <div className="text-gray-600 mb-6 font-utm-avo">
                  <p className="mb-2">
                    ƒê∆°n h√†ng <span className="font-semibold">#{orderId}</span>{" "}
                    ƒë√£ ƒë∆∞·ª£c ch·ªët th√†nh c√¥ng.
                  </p>
                  <p className="mb-2">
                    ƒê∆°n h√†ng hi·ªán ƒëang{" "}
                    <span className="font-semibold text-orange-600">
                      ch·ªù x√°c nh·∫≠n
                    </span>{" "}
                    t·ª´ ph√≠a admin.
                  </p>
                  <p className="text-sm text-gray-500">
                    Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n trong th·ªùi gian s·ªõm nh·∫•t ƒë·ªÉ x√°c
                    nh·∫≠n ƒë∆°n h√†ng v√† h∆∞·ªõng d·∫´n thanh to√°n.
                  </p>
                </div>

                {/* Actions */}
                <div className="flex flex-col sm:flex-row gap-3">
                  <Button
                    variant="outline"
                    onClick={() => navigate("/order-search")}
                    className="flex-1"
                  >
                    T√¨m ki·∫øm ƒë∆°n h√†ng
                  </Button>
                  <Button
                    variant="primary"
                    onClick={() => navigate("/")}
                    className="flex-1"
                  >
                    V·ªÅ trang ch·ªß
                  </Button>
                </div>

                {/* Contact Info */}
                <div className="mt-4 pt-4 border-t border-gray-200">
                  <p className="text-xs text-gray-500 font-utm-avo">
                    C√≥ th·∫Øc m·∫Øc? Li√™n h·ªá v·ªõi ch√∫ng t√¥i qua Facebook ho·∫∑c
                    Instagram
                  </p>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </div>
    </div>
  );
};

export default OrderFinalizePage;
